Deployment directions:
    Navigate to the AWS home page and login
    Navigate to the ec2 dashboard and switch the region to us-west-1
    Click launch instance and confirm it in the drop down menu
    Select Ubuntu Server 20.04 LTS (HVM), SSD Volume Type as the Amazon Machine Image (AMI) using the 64-bit (x86) configuration
    Select the tx.micro instance because it is the only free tier eligible instance type
    Use default instance details and click "Next: Add Storage"
    Use default storage and click "Next: Add Tags"
    Click "Add Tag" and create a tag with a key of "Name" and a value of "CSC 648 Class Project"
    Click "Next: Configure Security Group"
    Click "Add Rule" and change it to HTTP
    Click "Review and Launch" and click "Launch"
    Select "Create New Key Pair"
    Name the key "CSC 648 Class Project Key"
    Click "Launch Instances"
    AWS will download a file called "CSC648ClassProjectKey.pem" which you should upload to the credentials folder of the repo
    Navigate your browser back to ec2 and select "running instances"
    Select "CSC 648 Class Project"
    Using the "Public IPv4 address" value, and the "CSC648ClassProjectKey.pem" file in your downloads folder you should be able to ssh

    #TODO: ADD INFORMATION REGARDING THE SERVER TO THE REPO AND DOCUMENT THE STEPS HERE


To ssh into the machine (WINDOWS):
Download and run the portable home edition of MobaXTerm software. Found here https://mobaxterm.mobatek.net/download-home-edition.html
Click sessions in top left and then ssh
Enter the ip address in remote host and ubuntu in username
Click on the advanced ssh options and tap the use private key option and then put the path to th pem file in the field
Click the Bookmark settings tab and enter CSC648Project as the Session Name
Click OK
Click CSC648Project in the Sessions tab on the left to ssh into the machine

Instance configuration:
    ssh into the system and run the following command to upgrade apt and install vim
        sudo apt update && sudo apt upgrade && sudo apt-get update && sudo apt-get install vim

    run the following command to configure vim
        echo ":colo delek" > .vimrc

Installing MySql database:
    sudo apt install mysql-server mysql-client

    Check if the instance is installed and running with
        systemctl status mysql.service

    sudo mysql_secure_installation
    Enter y for the security prompt
    Enter 0 for low security

    Enter the following as the password
        Csc648MySqlPassword

    Enter y to proceed with the password
    Enter y to remove anonymous users
    Enter n to deny remote root access
    Enter n to keep the test db
    Enter y to reload the privledges table

    Enter the following command to enter sql mode


CREATE USER 'headless'@'%' IDENTIFIED BY '648headless';
GRANT ALL PRIVILEGES ON *.* TO 'headless'@'%';
FLUSH PRIVILEGES;
SHOW GRANTS FOR 'headless'@'%';

https://dev.mysql.com/downloads/workbench/?os=src

click no thanks

Run the msi once complete

Database, Connect to database

Connection method: Stadard TCP/IP over ssh

Csc648MySqlPassword


ssh-keygen -t rsa
chmod 400 ~/.ssh/id_rsa

Upload public key to repo deploy key
    repo setting > deploy key
    copy public key to the body of the deploy key
        cat ~/.ssh/id_rsa.pub

ec2-54-177-73-103.us-west-1.compute.amazonaws.com


Set up React
curl -sL https://deb.nodesource.com/setup_14.x | bash -
sudo apt -y install nodejs
npm install npm@latest -g
npm install -g create-react-app
npx create-react-app my-project
    HUGE ISSUE ABOVE: Due to limited resources the cpu and ram were fully utilized because it needed to use virtual memory
    Babysitted each part disjointedly:
        npm install cra-template
        npm install react
        npm install react-dom
        npm install react-scripts

iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3000

Change this into making it a service
    nohup npm start &


